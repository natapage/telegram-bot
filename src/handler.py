"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram"""

import structlog
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from src.dialog_manager import DialogManager
from src.llm_client import LLMClient


class MessageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram"""

    def __init__(self, llm_client: LLMClient, dialog_manager: DialogManager, logger: structlog.BoundLogger) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

        Args:
            llm_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM
            dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
            logger: –õ–æ–≥–≥–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.llm_client: LLMClient = llm_client
        self.dialog_manager: DialogManager = dialog_manager
        self.logger: structlog.BoundLogger = logger
        self.router: Router = Router()
        self._register_handlers()

    def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.router.message.register(self.handle_start, Command("start"))
        self.router.message.register(self.handle_role, Command("role"))
        self.router.message.register(self.handle_clear, Command("clear"))
        self.router.message.register(self.handle_text)

    async def handle_start(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø LLM-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")

    async def handle_role(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /role

        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        role_name = self.dialog_manager.config.BOT_ROLE_NAME
        role_description = self.dialog_manager.config.BOT_ROLE_DESCRIPTION

        response = f"ü§ñ {role_name}\n\n{role_description}"
        await message.answer(response)

    async def handle_clear(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear

        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not message.from_user:
            return

        user_id = message.from_user.id
        await self.dialog_manager.clear_history(user_id)
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞")

    async def handle_text(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not message.text:
            return

        if not message.from_user:
            return

        user_id = message.from_user.id

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        self.logger.info("message_received", user_id=user_id, text=message.text)

        try:
            # –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            await self.dialog_manager.add_message(user_id, "user", message.text)

            # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ LLM
            history = await self.dialog_manager.get_history(user_id)
            response = await self.llm_client.generate_response(history)

            # –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            await self.dialog_manager.add_message(user_id, "assistant", response)

            await message.answer(response)
        except Exception as e:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
            self.logger.error("llm_error", user_id=user_id, error=str(e), exc_info=True)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
